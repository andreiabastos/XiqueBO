---
alwaysApply: true
description: Documenta√ß√£o obrigat√≥ria - README e CHANGELOG devem ser atualizados com novas funcionalidades
---

# Documenta√ß√£o Obrigat√≥ria

## Regra de Ouro
**C√≥digo sem documenta√ß√£o = C√≥digo incompleto**

Toda funcionalidade implementada DEVE ser acompanhada de atualiza√ß√£o na documenta√ß√£o.

## Arquivos Obrigat√≥rios

### 1. README.md
**Quando atualizar:**
- Ao adicionar uma nova funcionalidade
- Ao adicionar uma nova depend√™ncia
- Ao mudar comandos de execu√ß√£o
- Ao adicionar novos requisitos
- Ao mudar a estrutura do projeto

**O que documentar:**
- **Descri√ß√£o clara**: O que a funcionalidade faz
- **Como usar**: Exemplos pr√°ticos de uso
- **Pr√©-requisitos**: O que √© necess√°rio para funcionar
- **Configura√ß√£o**: Passos de setup se necess√°rio
- **Screenshots**: Imagens quando aplic√°vel (especialmente para UI)

### 2. CHANGELOG.md
**Quando atualizar:**
- A CADA commit de funcionalidade (feat:)
- A CADA corre√ß√£o de bug (fix:)
- Mudan√ßas significativas (refactor:, perf:)

**Formato do CHANGELOG:**
```markdown
## [Unreleased]

### Added (feat:)
- Nova funcionalidade X que permite Y
- Componente Z adicionado para fazer W

### Fixed (fix:)
- Corrigido erro no componente A
- Resolvido problema de performance em B

### Changed (refactor:, style:)
- Refatorado m√≥dulo C para melhor organiza√ß√£o
- Atualizada interface D

### Removed
- Removida depend√™ncia obsoleta E
```

## Fluxo de Trabalho Obrigat√≥rio

### Para Novas Funcionalidades (feat:)

1. **Implementar** a funcionalidade
2. **Atualizar README.md**:
   - Adicionar se√ß√£o explicando a funcionalidade
   - Incluir exemplos de uso
   - Atualizar √≠ndice se necess√°rio
3. **Atualizar CHANGELOG.md**:
   - Adicionar entrada em `## [Unreleased]` ‚Üí `### Added`
   - Descrever o que foi adicionado
4. **Fazer commit** incluindo os 3 arquivos:
   ```bash
   git add [arquivos-da-funcionalidade] README.md CHANGELOG.md
   git commit -m "feat: [descri√ß√£o da funcionalidade]"
   ```

### Para Corre√ß√µes de Bugs (fix:)

1. **Corrigir** o bug
2. **Atualizar CHANGELOG.md**:
   - Adicionar entrada em `## [Unreleased]` ‚Üí `### Fixed`
   - Descrever o que foi corrigido
3. **Atualizar README.md** (se necess√°rio):
   - Se o bug afetava a documenta√ß√£o existente
4. **Fazer commit**:
   ```bash
   git add [arquivos-corrigidos] CHANGELOG.md
   git commit -m "fix: [descri√ß√£o do problema resolvido]"
   ```

## Exemplos Pr√°ticos

### Exemplo 1: Nova Funcionalidade de Autentica√ß√£o

**README.md - Adicionar se√ß√£o:**
```markdown
## Autentica√ß√£o

O XiqueGo implementa autentica√ß√£o usando Firebase Auth com suporte para:
- Login com Email/Senha
- Login com Google
- Login com Facebook

### Como usar

\`\`\`typescript
import { useAuth } from '@/contexts/AuthContext';

function MyComponent() {
  const { user, signIn, signOut } = useAuth();
  
  const handleLogin = async () => {
    await signIn(email, password);
  };
  
  return <Button onPress={handleLogin}>Login</Button>;
}
\`\`\`

### Configura√ß√£o

1. Configure o Firebase no console
2. Adicione suas credenciais em `.env`:
   \`\`\`
   FIREBASE_API_KEY=sua_chave_aqui
   \`\`\`
```

**CHANGELOG.md - Adicionar entrada:**
```markdown
## [Unreleased]

### Added
- Sistema de autentica√ß√£o com Firebase Auth (Email, Google, Facebook)
- Context `AuthContext` para gerenciamento de sess√£o de usu√°rio
- Telas de login e cadastro com valida√ß√£o de formul√°rios
- Prote√ß√£o de rotas autenticadas
```

### Exemplo 2: Corre√ß√£o de Bug no C√°lculo de Pre√ßo

**CHANGELOG.md - Adicionar entrada:**
```markdown
## [Unreleased]

### Fixed
- Corrigido c√°lculo de pre√ßo que n√£o considerava taxa adicional para entregas em povoados
- Resolvido erro de arredondamento em valores monet√°rios
```

**README.md - Atualizar se necess√°rio:**
```markdown
## C√°lculo de Pre√ßos

O sistema calcula pre√ßos baseado em:
- Dist√¢ncia percorrida
- Tipo de ve√≠culo
- Taxa adicional para povoados (10%)  ‚Üê ATUALIZAR SE MUDOU
```

## Template README.md

Use esta estrutura base para o README.md:

```markdown
# Nome do Projeto

Descri√ß√£o breve do que o projeto faz.

## Funcionalidades

- ‚úÖ Funcionalidade 1
- ‚úÖ Funcionalidade 2
- üöß Em desenvolvimento: Funcionalidade 3

## Instala√ß√£o

\`\`\`bash
npm install
\`\`\`

## Configura√ß√£o

1. Passo 1
2. Passo 2

## Como Usar

### Funcionalidade X

Exemplo de c√≥digo...

### Funcionalidade Y

Exemplo de c√≥digo...

## Estrutura do Projeto

\`\`\`
/app        - Telas e rotas
/components - Componentes reutiliz√°veis
/services   - L√≥gica de neg√≥cio
\`\`\`

## Contribuindo

Siga as regras em `.cursor/rules/`

## Licen√ßa

MIT
```

## Template CHANGELOG.md

Use esta estrutura:

```markdown
# Changelog

Todas as mudan√ßas not√°veis neste projeto ser√£o documentadas neste arquivo.

O formato √© baseado em [Keep a Changelog](https://keepachangelog.com/pt-BR/1.0.0/),
e este projeto adere ao [Semantic Versioning](https://semver.org/lang/pt-BR/).

## [Unreleased]

### Added
- Novas funcionalidades v√£o aqui

### Changed
- Mudan√ßas em funcionalidades existentes

### Fixed
- Corre√ß√µes de bugs

### Removed
- Funcionalidades removidas

## [1.0.0] - 2025-01-15

### Added
- Release inicial
- Funcionalidade X
- Funcionalidade Y
```

## Verifica√ß√£o Antes do Commit

Antes de fazer commit, verifique:

- [ ] README.md atualizado (se feat: ou mudan√ßa significativa)
- [ ] CHANGELOG.md atualizado (sempre)
- [ ] Exemplos de c√≥digo funcionam
- [ ] Links na documenta√ß√£o n√£o est√£o quebrados
- [ ] Screenshots atualizados (se mudan√ßa visual)

## Benef√≠cios

- ‚úÖ Time sempre sabe o que mudou
- ‚úÖ Novos desenvolvedores entendem rapidamente
- ‚úÖ Hist√≥rico claro de evolu√ß√£o do projeto
- ‚úÖ Facilita troubleshooting
- ‚úÖ Documenta√ß√£o nunca fica desatualizada

## Exce√ß√µes

**N√£o precisa atualizar documenta√ß√£o para:**
- Commits de formata√ß√£o pura (style:)
- Mudan√ßas internas que n√£o afetam uso (refactor: interno)
- Atualiza√ß√µes de depend√™ncias sem mudan√ßa de API
- Corre√ß√µes de typos na documenta√ß√£o (docs:)

**Mas sempre atualize CHANGELOG.md mesmo nesses casos!**

---

**Lembre-se:** Documenta√ß√£o √© parte do desenvolvimento, n√£o um extra opcional. Se n√£o est√° documentado, n√£o est√° pronto.
